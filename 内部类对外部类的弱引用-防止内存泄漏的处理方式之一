各种引用都是什么意思？

StrongReference： 强引用是 Java 中最为常见的引用类型。任何时候，当我们创建了一个对象，强引用也同时被创建了。比如，当我们这么做：

MyObject object = new MyObject();
一个新的 MyObject 对象被创建，指向它的强引用保存在 object 中。你还在看吧？ 嗯，更有意思的事情来了，这个 object 是可以强行到达的——意思就是，它可以通过一系列强引用找到，这将会阻止垃圾回收机制回收它，然而，这正是是我们最想要的。现在，我们来看个例子。

public class MainActivity extends Activity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {   
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        new MyAsyncTask().execute();
    }

    private class MyAsyncTask extends AsyncTask {
        @Override
        protected Object doInBackground(Object[] params) {
            return doSomeStuff();
        }
        private Object doSomeStuff() {
            //do something to get result
            return new MyObject();
        } 
    }
}
花几分钟，尝试去找可能出现问题的点。

不用担心，如果一时找不到，那再花点时间看看。

现在呢？

AsyncTask 对象会在 Activity onCreate() 方法中创建并运行。但这里有个问题：内部类在它的整个生命周期中是会访问外部类。

如果 Activity 被 destroy 掉时，会发生什么？ AsyncTask 仍然持有 Activity 的引用，所以 Activity 是不能被 GC 回收的。这就是我们所说的内存泄漏。

旁注 ：以前，我曾经对合适的人进行访谈，我问他们如何创建内存泄漏，而不是询问内存泄漏的理论方面。这总是更有趣！

内存泄漏实际上不仅发生在 Activity 自身销毁的时候，同时还发生在由于配置的改变或需要更多的内存而被系统强行销毁等时刻。如果 AsyncTask 复杂点（比如，持有 Activity 上的 View 的引用），它甚至会导致崩溃，因为 view 的引用是 null。

那么，要如何防止这种问题再次发生呢？我们接下来介绍另一种类型的引用：

WeakReference：弱引用是引用强度不足以将对象保持在内存中的引用。如果垃圾回收机制试图确定对象的引用强度，如果恰好是通过 WeakReferences 引用，那么该对象将被垃圾回收。为了便于理解，最好是先抛开理论，用上个例子来说明如何使用 WeakReference 来避免内存泄漏：

public class MainActivity extends Activity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        new MyAsyncTask(this).execute();
     }
    private static class MyAsyncTask extends AsyncTask {
        private WeakReference mainActivity;    

        public MyAsyncTask(MainActivity mainActivity) {   
            this.mainActivity = new WeakReference<>(mainActivity);            
        }
        @Override
        protected Object doInBackground(Object[] params) {
            return doSomeStuff();
        }
        private Object doSomeStuff() {
            //do something to get result
            return new Object();
        }
        @Override
        protected void onPostExecute(Object object) {
            super.onPostExecute(object);
            if (mainActivity.get() != null){
                //adapt contents
            }
        }
    }
    }
现在注意一个主要区别：Activity 是这样被内部类引用的：

private WeakReference mainActivity;
这样做有什么差别呢？ 当 Activity 不存在时，由于它是被 WeakReference 持有的，可以被收集。 因此，不会发生内存泄漏。
